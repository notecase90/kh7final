<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	매퍼 파일은 SQL 구문을 보관하는 파일을 말하며 일반적으로 "테이블당 1개" 만든다.
	- namespace : 여러 개의 매퍼 중에 현재 매퍼를 식별하도록 지어주는 고유한 명칭(필수)
 -->
<mapper namespace="review">
	
	<!-- 
		구문 생성 : 종류에 맞는 구문을 해당 태그로 작성
		- id : 외부에서 구문을 실행하기 위해 알아야 할 구문의 고유 식별값 
		- parameterType : 외부에서 전달되는 데이터의 타입
		- resultType : 조회 결과 형태(오로지 select에서만 사용가능)
			- 목록이나 단일항목 모두 DTO로 취급한다
			
		mybatis에는 2종류의 바인딩이 존재
		1. 정적 바인딩 : 있는 그대로의 데이터를 추가적인 처리 없이 구문에 할당(항목)	
			사용법 : ${데이터}
		2. 동적 바인딩 : 데이터를 형태에 맞게 해석하여 따옴표 등을 처리한 뒤 구문에 할당(데이터)
			사용법 : #{데이터}
	 -->
	
	<!-- 리뷰 추가 -->
	<insert id="insert" parameterType="ReviewDto">
		insert into review values(
		review_seq.nextval, #{reviewRoomNo}, #{reviewContent},
		#{reviewStar}, sysdate,  #{reviewMember}
		)
	</insert>
	
	<!-- 리뷰 수정 -->
	<update id="edit" parameterType="ReviewDto">
		update review 
		set
		review_content = #{reviewContent}, 
		review_star = #{reviewStar},
		review_date = sysdate 
		where
		review_member = #{reviewMember} and
		review_no = #{reviewNo} 
	</update>
	
	<!-- 모든 숙소 리뷰 -->
	<select id="list" resultType="reviewVo">
		select * from review_view order by review_no asc
	</select>
	
	<!-- 한 숙소에 대한 리뷰목록 -->
	<select id="onelist" parameterType="int" resultType="reviewVo">
		select * from detail_view
		where room_no = #{RoomNo} order by review_no asc
	</select>
	
	<!-- 리뷰 상세보기 -->
	<select id="detail" parameterType="int" resultType="reviewVo">
		select * from detail_view where review_no = #{reviewNo}
	</select>
	
	<!-- 삭제 -->
	<delete id="delete" parameterType="int">
		delete review 
		where 
		review_no = #{reviewNo} 
	</delete>
	
	
	
</mapper>




